-- MySQL Script generated by MySQL Workbench
-- Fri 30 Sep 2016 01:30:59 PM EDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='';

-- -----------------------------------------------------
-- Schema mastodon
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mastodon` ;

-- -----------------------------------------------------
-- Schema mastodon
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mastodon` ;
-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `cenozo` ;

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cenozo` DEFAULT CHARACTER SET utf8 ;
USE `mastodon` ;

-- -----------------------------------------------------
-- Table `cenozo`.`age_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`age_group` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`age_group` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `lower` INT NOT NULL,
  `upper` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_lower` (`lower` ASC),
  UNIQUE INDEX `uq_upper` (`upper` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`cohort`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`cohort` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`cohort` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`source`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`source` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`source` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `override_quota` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`state` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`state` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `rank` INT NOT NULL,
  `description` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_rank` (`rank` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`language`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`language` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`language` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 0,
  `code` CHAR(2) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_code` (`code` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`availability_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`availability_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`availability_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `uid` VARCHAR(45) NOT NULL COMMENT 'External unique ID',
  `source_id` INT UNSIGNED NULL DEFAULT NULL,
  `cohort_id` INT UNSIGNED NOT NULL,
  `grouping` VARCHAR(45) NULL DEFAULT NULL,
  `honorific` VARCHAR(10) NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `other_name` VARCHAR(100) NULL DEFAULT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `sex` ENUM('male','female') NOT NULL,
  `date_of_birth` DATE NULL DEFAULT NULL,
  `age_group_id` INT UNSIGNED NULL DEFAULT NULL,
  `state_id` INT UNSIGNED NULL DEFAULT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  `availability_type_id` INT UNSIGNED NULL,
  `callback` DATETIME NULL DEFAULT NULL,
  `override_quota` TINYINT(1) NOT NULL DEFAULT 0,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `email_datetime` DATETIME NULL DEFAULT NULL,
  `email_old` VARCHAR(255) NULL DEFAULT NULL,
  `mass_email` TINYINT(1) NOT NULL DEFAULT 1,
  `check_withdraw` DATETIME NULL DEFAULT NULL,
  `delink` TINYINT(1) NOT NULL DEFAULT 0,
  `out_of_area` TINYINT(1) NOT NULL DEFAULT 0,
  `low_education` TINYINT(1) NOT NULL DEFAULT 0,
  `global_note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC),
  INDEX `dk_active` (`active` ASC),
  INDEX `dk_uid` (`uid` ASC),
  INDEX `fk_age_group_id` (`age_group_id` ASC),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_source_id` (`source_id` ASC),
  INDEX `fk_state_id` (`state_id` ASC),
  INDEX `dk_email_datetime` (`email_datetime` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `fk_availability_type_id` (`availability_type_id` ASC),
  INDEX `dk_datetime` (`callback` ASC),
  CONSTRAINT `fk_participant_age_group_id`
    FOREIGN KEY (`age_group_id`)
    REFERENCES `cenozo`.`age_group` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_source_id`
    FOREIGN KEY (`source_id`)
    REFERENCES `cenozo`.`source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_state_id`
    FOREIGN KEY (`state_id`)
    REFERENCES `cenozo`.`state` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_availability_type_id`
    FOREIGN KEY (`availability_type_id`)
    REFERENCES `cenozo`.`availability_type` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`consent_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`consent_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`consent_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`consent` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`consent` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `consent_type_id` INT UNSIGNED NOT NULL,
  `accept` TINYINT(1) NOT NULL,
  `written` TINYINT(1) NOT NULL,
  `datetime` DATETIME NOT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`form_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`form_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`form_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(100) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`form` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`form` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `form_type_id` INT UNSIGNED NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_form_type_id` (`form_type_id` ASC),
  UNIQUE INDEX `uq_participant_id_form_type_id_date` (`participant_id` ASC, `form_type_id` ASC, `date` ASC),
  CONSTRAINT `fk_form_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_form_form_type_id`
    FOREIGN KEY (`form_type_id`)
    REFERENCES `cenozo`.`form_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`consent_form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`consent_form` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`consent_form` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `form_id` INT UNSIGNED NULL,
  `completed` TINYINT(1) NOT NULL DEFAULT 0,
  `invalid` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'If true then the form cannot be processed.',
  `validated_consent_form_entry_id` INT UNSIGNED NULL DEFAULT NULL COMMENT 'The entry data which has been validated and accepted.',
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_validated_consent_form_entry_id` (`validated_consent_form_entry_id` ASC),
  INDEX `fk_form_id` (`form_id` ASC),
  CONSTRAINT `fk_consent_form_consent_id`
    FOREIGN KEY ()
    REFERENCES `cenozo`.`consent` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_consent_form_validated_consent_form_entry_id`
    FOREIGN KEY (`validated_consent_form_entry_id`)
    REFERENCES `mastodon`.`consent_form_entry` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_consent_form_form_id`
    FOREIGN KEY (`form_id`)
    REFERENCES `cenozo`.`form` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `password` VARCHAR(255) NULL DEFAULT NULL,
  `first_name` VARCHAR(255) NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `use_12hour_clock` TINYINT(1) NOT NULL DEFAULT 0,
  `login_failures` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `dk_active` (`active` ASC),
  UNIQUE INDEX `uq_email` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`consent_form_entry`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`consent_form_entry` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`consent_form_entry` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `consent_form_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `submitted` TINYINT(1) NOT NULL DEFAULT 0,
  `uid` VARCHAR(10) NULL DEFAULT NULL,
  `option_1` TINYINT(1) NOT NULL DEFAULT 0,
  `option_2` TINYINT(1) NOT NULL DEFAULT 0,
  `signed` TINYINT(1) NOT NULL DEFAULT 0,
  `date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_consent_form_id` (`consent_form_id` ASC),
  UNIQUE INDEX `uq_consent_form_id_user_id` (`consent_form_id` ASC, `user_id` ASC),
  INDEX `dk_uid` (`uid` ASC),
  CONSTRAINT `fk_consent_form_entry_consent_form_id`
    FOREIGN KEY (`consent_form_id`)
    REFERENCES `mastodon`.`consent_form` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_consent_form_entry_user_id`
    FOREIGN KEY ()
    REFERENCES `cenozo`.`user` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`alternate` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`alternate` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `alternate` TINYINT(1) NOT NULL DEFAULT 0,
  `informant` TINYINT(1) NOT NULL DEFAULT 0,
  `proxy` TINYINT(1) NOT NULL DEFAULT 0,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `association` VARCHAR(45) NULL DEFAULT NULL,
  `global_note` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_alternate_participant`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`proxy_form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`proxy_form` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`proxy_form` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `form_id` INT UNSIGNED NULL,
  `from_onyx` TINYINT(1) NOT NULL DEFAULT 0,
  `completed` TINYINT(1) NOT NULL DEFAULT 0,
  `invalid` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'If true then the form cannot be processed.',
  `validated_proxy_form_entry_id` INT UNSIGNED NULL DEFAULT NULL COMMENT 'The entry data which has been validated and accepted.',
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_validated_proxy_form_entry_id` (`validated_proxy_form_entry_id` ASC),
  INDEX `fk_form_id` (`form_id` ASC),
  CONSTRAINT `fk_proxy_form_proxy_alternate_id`
    FOREIGN KEY ()
    REFERENCES `cenozo`.`alternate` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_form_validated_proxy_form_entry_id`
    FOREIGN KEY (`validated_proxy_form_entry_id`)
    REFERENCES `mastodon`.`proxy_form_entry` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_form_informant_alternate_id`
    FOREIGN KEY ()
    REFERENCES `cenozo`.`alternate` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_form_form_id`
    FOREIGN KEY (`form_id`)
    REFERENCES `cenozo`.`form` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`region` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`region` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `abbreviation` VARCHAR(5) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_abbreviation` (`abbreviation` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`proxy_form_entry`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`proxy_form_entry` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`proxy_form_entry` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `proxy_form_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `submitted` TINYINT(1) NOT NULL DEFAULT 0,
  `uid` VARCHAR(10) NULL DEFAULT NULL,
  `proxy` TINYINT(1) NOT NULL DEFAULT false,
  `already_identified` TINYINT(1) NOT NULL DEFAULT false,
  `proxy_first_name` VARCHAR(255) NULL DEFAULT NULL,
  `proxy_last_name` VARCHAR(255) NULL DEFAULT NULL,
  `proxy_apartment_number` VARCHAR(15) NULL DEFAULT NULL,
  `proxy_street_number` VARCHAR(15) NULL DEFAULT NULL,
  `proxy_street_name` VARCHAR(255) NULL DEFAULT NULL,
  `proxy_box` VARCHAR(15) NULL DEFAULT NULL,
  `proxy_rural_route` VARCHAR(15) NULL DEFAULT NULL,
  `proxy_address_other` VARCHAR(255) NULL DEFAULT NULL,
  `proxy_city` VARCHAR(255) NULL DEFAULT NULL,
  `proxy_region_id` INT UNSIGNED NULL DEFAULT NULL,
  `proxy_postcode` VARCHAR(10) NULL DEFAULT NULL COMMENT 'May be postal code or zip code.',
  `proxy_address_note` TEXT NULL DEFAULT NULL,
  `proxy_phone` VARCHAR(45) NULL DEFAULT NULL,
  `proxy_phone_note` TEXT NULL DEFAULT NULL,
  `proxy_note` TEXT NULL DEFAULT NULL,
  `informant` TINYINT(1) NOT NULL DEFAULT false,
  `same_as_proxy` TINYINT(1) NOT NULL DEFAULT false,
  `informant_first_name` VARCHAR(255) NULL DEFAULT NULL,
  `informant_last_name` VARCHAR(255) NULL DEFAULT NULL,
  `informant_apartment_number` VARCHAR(15) NULL DEFAULT NULL,
  `informant_street_number` VARCHAR(15) NULL DEFAULT NULL,
  `informant_street_name` VARCHAR(255) NULL DEFAULT NULL,
  `informant_box` VARCHAR(15) NULL DEFAULT NULL,
  `informant_rural_route` VARCHAR(15) NULL DEFAULT NULL,
  `informant_address_other` VARCHAR(255) NULL DEFAULT NULL,
  `informant_city` VARCHAR(255) NULL DEFAULT NULL,
  `informant_region_id` INT UNSIGNED NULL DEFAULT NULL,
  `informant_postcode` VARCHAR(10) NULL DEFAULT NULL,
  `informant_address_note` TEXT NULL DEFAULT NULL,
  `informant_phone` VARCHAR(45) NULL DEFAULT NULL,
  `informant_phone_note` TEXT NULL DEFAULT NULL,
  `informant_note` TEXT NULL DEFAULT NULL,
  `use_informant` TINYINT(1) NULL DEFAULT NULL,
  `continue_physical_tests` TINYINT(1) NULL DEFAULT NULL,
  `continue_draw_blood` TINYINT(1) NULL DEFAULT NULL,
  `hin_future_access` TINYINT(1) NULL DEFAULT NULL,
  `signed` TINYINT(1) NULL DEFAULT NULL,
  `date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_proxy_form_id` (`proxy_form_id` ASC),
  UNIQUE INDEX `uq_proxy_form_id_user_id` (`proxy_form_id` ASC, `user_id` ASC),
  INDEX `dk_uid` (`uid` ASC),
  CONSTRAINT `fk_proxy_form_entry_user_id`
    FOREIGN KEY ()
    REFERENCES `cenozo`.`user` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_form_entry_proxy_form_id`
    FOREIGN KEY (`proxy_form_id`)
    REFERENCES `mastodon`.`proxy_form` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_form_entry_proxy_region_id`
    FOREIGN KEY ()
    REFERENCES `cenozo`.`region` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_form_entry_informant_region_id`
    FOREIGN KEY ()
    REFERENCES `cenozo`.`region` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `tier` INT UNSIGNED NOT NULL DEFAULT 1 COMMENT '1 = normal, 2 = site admin, 3 = global admin',
  `all_sites` TINYINT(1) NOT NULL DEFAULT 0,
  `special` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`site` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `title` VARCHAR(45) NULL DEFAULT NULL,
  `phone_number` VARCHAR(45) NULL DEFAULT NULL,
  `address1` VARCHAR(512) NULL DEFAULT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NULL DEFAULT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`access`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`access` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`access` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  `microtime` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_user_id_role_id_site_id` (`user_id` ASC, `role_id` ASC, `site_id` ASC),
  INDEX `dk_datetime_microtime` (`datetime` ASC, `microtime` ASC),
  CONSTRAINT `fk_access_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`recording`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`recording` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`recording` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `rank` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `record` TINYINT(1) NOT NULL,
  `timer` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_rank` (`rank` ASC),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`recording_file`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`recording_file` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`recording_file` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `recording_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  `filename` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_language_id` (`language_id` ASC),
  UNIQUE INDEX `uq_recording_id_language_id` (`recording_id` ASC, `language_id` ASC),
  CONSTRAINT `fk_recording_file_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`role_has_service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`role_has_service` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`role_has_service` (
  `role_id` INT UNSIGNED NOT NULL,
  `service_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NULL DEFAULT NULL,
  `create_timestamp` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`role_id`, `service_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_service_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`service` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`service` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `method` ENUM('DELETE','GET','PATCH','POST','PUT') NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `resource` TINYINT(1) NOT NULL DEFAULT 0,
  `restricted` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `uq_method_subject_resource` (`method` ASC, `subject` ASC, `resource` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`setting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`setting` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`setting` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_site_id` (`site_id` ASC),
  CONSTRAINT `fk_setting_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`writelog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`writelog` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`writelog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `method` ENUM('DELETE','PATCH','POST','PUT') NOT NULL,
  `path` VARCHAR(512) NOT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  `status` INT NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_datetime` (`datetime` DESC),
  CONSTRAINT `fk_writelog_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`consent_form_total`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`consent_form_total` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`consent_form_total` (
  `consent_form_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `entry_total` INT NOT NULL,
  `submitted_total` INT NOT NULL,
  PRIMARY KEY (`consent_form_id`),
  CONSTRAINT `fk_consent_form_total_consent_form_id`
    FOREIGN KEY (`consent_form_id`)
    REFERENCES `mastodon`.`consent_form` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`proxy_form_total`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`proxy_form_total` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`proxy_form_total` (
  `proxy_form_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `entry_total` INT NOT NULL,
  `submitted_total` INT NOT NULL,
  PRIMARY KEY (`proxy_form_id`),
  CONSTRAINT `fk_proxy_form_total_proxy_form_id`
    FOREIGN KEY (`proxy_form_id`)
    REFERENCES `mastodon`.`proxy_form` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`contact_form_entry`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`contact_form_entry` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`contact_form_entry` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `contact_form_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `submitted` TINYINT(1) NOT NULL DEFAULT 0,
  `first_name` VARCHAR(255) NULL DEFAULT NULL,
  `last_name` VARCHAR(255) NULL DEFAULT NULL,
  `apartment_number` VARCHAR(15) NULL DEFAULT NULL,
  `street_number` VARCHAR(15) NULL DEFAULT NULL,
  `street_name` VARCHAR(255) NULL DEFAULT NULL,
  `box` VARCHAR(15) NULL DEFAULT NULL,
  `rural_route` VARCHAR(15) NULL DEFAULT NULL,
  `address_other` VARCHAR(255) NULL DEFAULT NULL,
  `city` VARCHAR(255) NULL DEFAULT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  `address_note` TEXT NULL DEFAULT NULL,
  `home_phone` VARCHAR(45) NULL DEFAULT NULL,
  `home_phone_note` TEXT NULL DEFAULT NULL,
  `mobile_phone` VARCHAR(45) NULL DEFAULT NULL,
  `mobile_phone_note` TEXT NULL DEFAULT NULL,
  `phone_preference` ENUM('either', 'home', 'mobile') NOT NULL DEFAULT 'either',
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `gender` ENUM('male', 'female') NULL DEFAULT NULL,
  `age_bracket` ENUM('45-49', '50-54', '55-59', '60-64', '65-69', '70-74', '75-79', '80-85') NULL DEFAULT NULL,
  `monday` TINYINT(1) NOT NULL DEFAULT 0,
  `tuesday` TINYINT(1) NOT NULL DEFAULT 0,
  `wednesday` TINYINT(1) NOT NULL DEFAULT 0,
  `thursday` TINYINT(1) NOT NULL DEFAULT 0,
  `friday` TINYINT(1) NOT NULL DEFAULT 0,
  `saturday` TINYINT(1) NOT NULL DEFAULT 0,
  `time_9_10` TINYINT(1) NOT NULL DEFAULT 0,
  `time_10_11` TINYINT(1) NOT NULL DEFAULT 0,
  `time_11_12` TINYINT(1) NOT NULL DEFAULT 0,
  `time_12_13` TINYINT(1) NOT NULL DEFAULT 0,
  `time_13_14` TINYINT(1) NOT NULL DEFAULT 0,
  `time_14_15` TINYINT(1) NOT NULL DEFAULT 0,
  `time_15_16` TINYINT(1) NOT NULL DEFAULT 0,
  `time_16_17` TINYINT(1) NOT NULL DEFAULT 0,
  `time_17_18` TINYINT(1) NOT NULL DEFAULT 0,
  `time_18_19` TINYINT(1) NOT NULL DEFAULT 0,
  `time_19_20` TINYINT(1) NOT NULL DEFAULT 0,
  `time_20_21` TINYINT(1) NOT NULL DEFAULT 0,
  `high_school` TINYINT(1) NULL DEFAULT NULL,
  `post_secondary` TINYINT(1) NULL DEFAULT NULL,
  `language_id` INT UNSIGNED NULL DEFAULT NULL,
  `cohort_id` INT UNSIGNED NULL DEFAULT NULL,
  `code` ENUM('T', 'T*', 'T*2', 'T*3', 'T*4', 'T*5', 'T*6', 'T*7', 'C', 'C2', 'C3', 'C4', 'C5', 'CLE1', 'CLE2', 'CLE4', 'CLE5') NULL DEFAULT NULL,
  `signed` TINYINT(1) NOT NULL DEFAULT 0,
  `participant_date` DATE NULL DEFAULT NULL,
  `stamped_date` DATE NULL DEFAULT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_contact_form_id` (`contact_form_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  UNIQUE INDEX `uq_contact_form_id_user_id` (`contact_form_id` ASC, `user_id` ASC),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_contact_form_entry_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contact_form_entry_contact_form_id`
    FOREIGN KEY (`contact_form_id`)
    REFERENCES `mastodon`.`contact_form` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contact_form_entry_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contact_form_entry_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contact_form_entry_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `mastodon`.`contact_form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`contact_form` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`contact_form` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `form_id` INT UNSIGNED NULL,
  `completed` TINYINT(1) NOT NULL DEFAULT 0,
  `invalid` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'If true then the form cannot be processed.',
  `validated_contact_form_entry_id` INT UNSIGNED NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_validated_contact_form_entry_id` (`validated_contact_form_entry_id` ASC),
  INDEX `fk_form_id` (`form_id` ASC),
  CONSTRAINT `fk_contact_form_validated_contact_form_entry_id`
    FOREIGN KEY (`validated_contact_form_entry_id`)
    REFERENCES `mastodon`.`contact_form_entry` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contact_form_form_id`
    FOREIGN KEY (`form_id`)
    REFERENCES `cenozo`.`form` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `mastodon`.`hin_form_entry`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`hin_form_entry` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`hin_form_entry` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `hin_form_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `submitted` TINYINT(1) NOT NULL DEFAULT 0,
  `uid` VARCHAR(10) NULL DEFAULT NULL,
  `accept` TINYINT(1) NOT NULL DEFAULT 0,
  `signed` TINYINT(1) NOT NULL DEFAULT 0,
  `date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_hin_form_id` (`hin_form_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  UNIQUE INDEX `uq_hin_form_id_user_id` (`hin_form_id` ASC, `user_id` ASC),
  INDEX `dk_uid` (`uid` ASC),
  CONSTRAINT `fk_hin_form_entry_hin_form_id`
    FOREIGN KEY (`hin_form_id`)
    REFERENCES `mastodon`.`hin_form` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hin_form_entry_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`hin_form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`hin_form` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`hin_form` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `form_id` INT UNSIGNED NULL,
  `completed` TINYINT(1) NOT NULL DEFAULT 0,
  `invalid` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'If true then the form cannot be processed.',
  `validated_hin_form_entry_id` INT UNSIGNED NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_validated_hin_form_entry_id` (`validated_hin_form_entry_id` ASC),
  INDEX `fk_form_id` (`form_id` ASC),
  CONSTRAINT `fk_hin_form_validated_hin_form_entry_id`
    FOREIGN KEY (`validated_hin_form_entry_id`)
    REFERENCES `mastodon`.`hin_form_entry` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hin_form_form_id`
    FOREIGN KEY (`form_id`)
    REFERENCES `cenozo`.`form` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`hin_form_total`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`hin_form_total` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`hin_form_total` (
  `hin_form_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `entry_total` INT NOT NULL,
  `submitted_total` INT NOT NULL,
  PRIMARY KEY (`hin_form_id`),
  CONSTRAINT `hin_form_total_hin_form_id`
    FOREIGN KEY (`hin_form_id`)
    REFERENCES `mastodon`.`hin_form` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`contact_form_total`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`contact_form_total` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`contact_form_total` (
  `contact_form_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `entry_total` INT NOT NULL,
  `submitted_total` INT NOT NULL,
  PRIMARY KEY (`contact_form_id`),
  CONSTRAINT `fk_contact_form_total_contact_form_id`
    FOREIGN KEY (`contact_form_id`)
    REFERENCES `mastodon`.`contact_form` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`export`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`export` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`export` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_title` (`title` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_export_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`export_column`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`export_column` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`export_column` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `export_id` INT UNSIGNED NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `table_name` VARCHAR(45) NOT NULL,
  `column_name` VARCHAR(45) NOT NULL,
  `subtype` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_export_id_rank` (`export_id` ASC, `rank` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mastodon`.`export_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mastodon`.`export_restriction` ;

CREATE TABLE IF NOT EXISTS `mastodon`.`export_restriction` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `export_id` INT UNSIGNED NOT NULL,
  `export_column_id` INT UNSIGNED NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `column_name` VARCHAR(45) NOT NULL,
  `logic` ENUM('or', 'and') NOT NULL DEFAULT 'and',
  `test` ENUM('<=>', '<>', '<', '>', 'like', 'not like') NOT NULL DEFAULT '<=>',
  `value` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_export_id_rank` (`export_id` ASC, `rank` ASC))
ENGINE = InnoDB;

USE `cenozo` ;

-- -----------------------------------------------------
-- Table `cenozo`.`event_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `record_address` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`postcode`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`postcode` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`postcode` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(7) NOT NULL COMMENT 'Postcodes with the same province, tz and dst are grouped.',
  `region_id` INT UNSIGNED NOT NULL,
  `timezone_offset` FLOAT NOT NULL,
  `daylight_savings` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_postcode_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`address` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NULL DEFAULT NULL,
  `participant_id` INT UNSIGNED NULL DEFAULT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT NOT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `address1` VARCHAR(512) NOT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NOT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  `international_region` VARCHAR(100) NULL DEFAULT NULL,
  `international_country` VARCHAR(100) NULL DEFAULT NULL,
  `timezone_offset` FLOAT NOT NULL,
  `daylight_savings` TINYINT(1) NOT NULL,
  `january` TINYINT(1) NOT NULL DEFAULT 1,
  `february` TINYINT(1) NOT NULL DEFAULT 1,
  `march` TINYINT(1) NOT NULL DEFAULT 1,
  `april` TINYINT(1) NOT NULL DEFAULT 1,
  `may` TINYINT(1) NOT NULL DEFAULT 1,
  `june` TINYINT(1) NOT NULL DEFAULT 1,
  `july` TINYINT(1) NOT NULL DEFAULT 1,
  `august` TINYINT(1) NOT NULL DEFAULT 1,
  `september` TINYINT(1) NOT NULL DEFAULT 1,
  `october` TINYINT(1) NOT NULL DEFAULT 1,
  `november` TINYINT(1) NOT NULL DEFAULT 1,
  `december` TINYINT(1) NOT NULL DEFAULT 1,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `dk_city` (`city` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  CONSTRAINT `fk_address_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`jurisdiction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`jurisdiction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`jurisdiction` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `postcode` VARCHAR(7) NOT NULL,
  `longitude` FLOAT NOT NULL,
  `latitude` FLOAT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_site_id_postcode` (`site_id` ASC, `postcode` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  CONSTRAINT `fk_jurisdiction_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`phone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`phone` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`phone` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NULL DEFAULT NULL,
  `participant_id` INT UNSIGNED NULL DEFAULT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT NOT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `type` ENUM('home','home2','work','work2','mobile','mobile2','other','other2') NOT NULL,
  `number` VARCHAR(127) NOT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_address_id` (`address_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  CONSTRAINT `fk_phone_address`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`quota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`quota` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`quota` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `region_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `sex` ENUM('male','female') NOT NULL,
  `age_group_id` INT UNSIGNED NOT NULL,
  `population` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_region_id_site_id_sex_age_group_id` (`region_id` ASC, `site_id` ASC, `sex` ASC, `age_group_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `fk_age_group_id` (`age_group_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_quota_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_quota_age_group_id`
    FOREIGN KEY (`age_group_id`)
    REFERENCES `cenozo`.`age_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_quota_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`note`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`note` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`note` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NULL DEFAULT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `sticky` TINYINT(1) NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `note` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `dk_sticky_datetime` (`sticky` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  CONSTRAINT `fk_note_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_participant` (
  `application_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `preferred_site_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_preferred_site_id` (`preferred_site_id` ASC),
  CONSTRAINT `fk_application_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_participant_preferred_site_id`
    FOREIGN KEY (`preferred_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `event_type_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_event_type_id` (`event_type_id` ASC),
  UNIQUE INDEX `uq_participant_id_event_type_id_datetime` (`participant_id` ASC, `event_type_id` ASC, `datetime` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_event_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_event_type_id`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`unique_identifier_pool`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`unique_identifier_pool` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`unique_identifier_pool` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `uid` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_cohort`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_cohort` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_cohort` (
  `application_id` INT UNSIGNED NOT NULL,
  `cohort_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `grouping` ENUM('region','jurisdiction') NOT NULL DEFAULT 'region',
  PRIMARY KEY (`application_id`, `cohort_id`),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_cohort_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_role` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_role` (
  `application_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `role_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_role_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_application`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_application` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_application` (
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `theme` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`user_id`, `application_id`),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_application_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`hin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`hin` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`hin` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `code` VARCHAR(45) NOT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  CONSTRAINT `fk_hin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_hin_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`region_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`region_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`region_site` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL COMMENT 'Used to determine a participant\'s default site.',
  `site_id` INT UNSIGNED NOT NULL,
  `region_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_site_id_region_id_language_id` (`site_id` ASC, `region_id` ASC, `language_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_region_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role_has_state` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_state` (
  `role_id` INT UNSIGNED NOT NULL,
  `state_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`role_id`, `state_id`),
  INDEX `fk_state_id` (`state_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_state_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_state_state_id`
    FOREIGN KEY (`state_id`)
    REFERENCES `cenozo`.`state` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_language`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_language` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_language` (
  `user_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`user_id`, `language_id`),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_language_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_language_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`collection` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `locked` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`collection_has_participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`collection_has_participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`collection_has_participant` (
  `collection_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`collection_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_collection_id` (`collection_id` ASC),
  CONSTRAINT `fk_collection_has_participant_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_collection_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_collection` (
  `user_id` INT UNSIGNED NOT NULL,
  `collection_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`user_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_collection_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Users who can edit locked collections.';


-- -----------------------------------------------------
-- Table `cenozo`.`activity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`activity` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`activity` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `start_datetime` DATETIME NOT NULL,
  `end_datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_activity_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_site` (
  `application_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `default_site_id` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_default_site_id` (`default_site_id` ASC),
  CONSTRAINT `fk_participant_site_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_site_default_site_id`
    FOREIGN KEY (`default_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_primary_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_primary_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_primary_address` (
  `participant_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_primary_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_primary_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_first_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`alternate_first_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_first_address` (
  `alternate_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`alternate_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_alternate_first_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_alternate_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_first_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_first_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_first_address` (
  `participant_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_first_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`system_message`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`system_message` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`system_message` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `application_id` INT UNSIGNED NULL DEFAULT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `role_id` INT UNSIGNED NULL DEFAULT NULL,
  `title` VARCHAR(255) NOT NULL,
  `note` TEXT NOT NULL,
  `expiry` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_system_message_id` (`application_id` ASC),
  CONSTRAINT `fk_system_message_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_system_message_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_consent` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_consent` (
  `participant_id` INT UNSIGNED NOT NULL,
  `consent_type_id` INT UNSIGNED NOT NULL,
  `consent_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`, `consent_type_id`),
  INDEX `fk_consent_id` (`consent_id` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_participant_last_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_consent_consent_id`
    FOREIGN KEY (`consent_id`)
    REFERENCES `cenozo`.`consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_written_consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_written_consent` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_written_consent` (
  `participant_id` INT UNSIGNED NOT NULL,
  `consent_type_id` INT UNSIGNED NOT NULL,
  `consent_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`, `consent_type_id`),
  INDEX `fk_consent_id` (`consent_id` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_participant_last_written_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_written_consent_consent_id`
    FOREIGN KEY (`consent_id`)
    REFERENCES `cenozo`.`consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_written_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_site` (
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `site_id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_event` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_event` (
  `participant_id` INT UNSIGNED NOT NULL,
  `event_type_id` INT UNSIGNED NOT NULL,
  `event_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`, `event_type_id`),
  INDEX `fk_event_type_id` (`event_type_id` ASC),
  INDEX `fk_event_id` (`event_id` ASC),
  CONSTRAINT `fk_participant_last_event_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_event_event_type_id`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_event_event_id`
    FOREIGN KEY (`event_id`)
    REFERENCES `cenozo`.`event` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`script`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`script` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`script` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `started_event_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `finished_event_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `sid` INT NOT NULL,
  `repeated` TINYINT(1) NOT NULL DEFAULT 0,
  `withdraw` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_started_event_type_id` (`started_event_type_id` ASC),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_finished_event_type_id` (`finished_event_type_id` ASC),
  UNIQUE INDEX `uq_sid` (`sid` ASC),
  CONSTRAINT `fk_script_started_event_type_id`
    FOREIGN KEY (`started_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_script_finished_event_type_id`
    FOREIGN KEY (`finished_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_script`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_script` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_script` (
  `application_id` INT UNSIGNED NOT NULL,
  `script_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `script_id`),
  INDEX `fk_script_id` (`script_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_script_script_id`
    FOREIGN KEY (`script_id`)
    REFERENCES `cenozo`.`script` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`event_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event_address` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `event_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `address1` VARCHAR(512) NOT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NOT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_event_id` (`event_id` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_event_address_event_id`
    FOREIGN KEY (`event_id`)
    REFERENCES `cenozo`.`event` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_address_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`variable_cache`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`variable_cache` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`variable_cache` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `variable` VARCHAR(255) NOT NULL,
  `value` VARCHAR(255) NULL DEFAULT NULL,
  `expiry` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `dk_variable` (`variable` ASC),
  UNIQUE INDEX `uq_participant_id_variable` (`participant_id` ASC, `variable` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_variable_cache_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`search`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`search` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`search` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `word` VARCHAR(255) NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_word` (`word` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`search_result`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`search_result` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`search_result` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `search_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `record_id` INT UNSIGNED NOT NULL,
  `subject` VARCHAR(64) NOT NULL,
  `column_name` VARCHAR(64) NOT NULL,
  `value` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_search_id` (`search_id` ASC),
  INDEX `uq_search_id_participant_id_subject_column_name` (`search_id` ASC, `participant_id` ASC, `subject` ASC, `column_name` ASC),
  INDEX `uq_search_id_record_id_subject_column_name` (`search_id` ASC, `record_id` ASC, `subject` ASC, `column_name` ASC),
  CONSTRAINT `fk_search_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_search_result_search_id`
    FOREIGN KEY (`search_id`)
    REFERENCES `cenozo`.`search` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`next_of_kin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`next_of_kin` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`next_of_kin` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` VARCHAR(45) NULL DEFAULT NULL,
  `create_timestamp` VARCHAR(45) NULL DEFAULT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `first_name` VARCHAR(45) NULL DEFAULT NULL,
  `last_name` VARCHAR(45) NULL DEFAULT NULL,
  `gender` VARCHAR(10) NULL DEFAULT NULL,
  `phone` VARCHAR(100) NULL DEFAULT NULL,
  `street` VARCHAR(255) NULL DEFAULT NULL,
  `city` VARCHAR(100) NULL DEFAULT NULL,
  `province` VARCHAR(45) NULL DEFAULT NULL,
  `postal_code` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_next_of_kin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  `application_type_id` INT UNSIGNED NOT NULL,
  `url` VARCHAR(511) NOT NULL,
  `version` VARCHAR(45) NOT NULL,
  `release_based` TINYINT(1) NOT NULL DEFAULT 1,
  `release_event_type_id` INT UNSIGNED NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `update_queue` TINYINT(1) NOT NULL DEFAULT 0,
  `primary_color` CHAR(7) NOT NULL DEFAULT '#3f3f7d',
  `secondary_color` CHAR(7) NOT NULL DEFAULT '#9ba8b7',
  `theme_expired` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_release_event_type_id` (`release_event_type_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_release_event_type_id`
    FOREIGN KEY (`release_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_schedule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_schedule` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_schedule` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `schedule` ENUM('daily', 'weekly', 'monthly') NOT NULL DEFAULT 'daily',
  `format` ENUM('CSV', 'Excel', 'LibreOffice') NOT NULL DEFAULT 'CSV',
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_repeat` (`schedule` ASC),
  CONSTRAINT `fk_report_schedule_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `report_schedule_id` INT UNSIGNED NULL DEFAULT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `format` ENUM('CSV', 'Excel', 'LibreOffice') NOT NULL DEFAULT 'CSV',
  `size` BIGINT UNSIGNED NULL DEFAULT NULL,
  `stage` ENUM('started', 'reading data', 'writing data', 'completed', 'failed') NOT NULL DEFAULT 'started',
  `progress` FLOAT NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_report_schedule_id` (`report_schedule_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `dk_stage` (`stage` ASC),
  INDEX `dk_size` (`size` ASC),
  CONSTRAINT `fk_report_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_report_schedule_id`
    FOREIGN KEY (`report_schedule_id`)
    REFERENCES `cenozo`.`report_schedule` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_report_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role_has_report_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_report_type` (
  `role_id` INT UNSIGNED NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`role_id`, `report_type_id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_report_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_role_has_report_type_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_restriction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_restriction` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `rank` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `mandatory` TINYINT(1) NOT NULL DEFAULT 0,
  `restriction_type` ENUM('table', 'uid_list', 'string', 'integer', 'decimal', 'date', 'datetime', 'time', 'boolean', 'enum') NOT NULL,
  `custom` TINYINT(1) NOT NULL DEFAULT 0,
  `subject` VARCHAR(45) NULL DEFAULT NULL,
  `operator` ENUM('=', '<=>', '!=', '<>', '<', '<=', '>', '>=') NULL DEFAULT NULL,
  `enum_list` VARCHAR(511) NULL DEFAULT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  UNIQUE INDEX `uq_report_type_id_name` (`report_type_id` ASC, `name` ASC),
  UNIQUE INDEX `uq_report_type_id_rank` (`report_type_id` ASC, `rank` ASC),
  CONSTRAINT `fk_report_restriction_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_has_report_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_has_report_restriction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_has_report_restriction` (
  `report_id` INT UNSIGNED NOT NULL,
  `report_restriction_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `value` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`report_id`, `report_restriction_id`),
  INDEX `fk_report_restriction_id` (`report_restriction_id` ASC),
  INDEX `fk_report_id` (`report_id` ASC),
  CONSTRAINT `fk_report_has_report_restriction_report_id`
    FOREIGN KEY (`report_id`)
    REFERENCES `cenozo`.`report` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_has_report_restriction_report_restriction_id`
    FOREIGN KEY (`report_restriction_id`)
    REFERENCES `cenozo`.`report_restriction` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_schedule_has_report_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_schedule_has_report_restriction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_schedule_has_report_restriction` (
  `report_schedule_id` INT UNSIGNED NOT NULL,
  `report_restriction_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `value` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`report_schedule_id`, `report_restriction_id`),
  INDEX `fk_report_restriction_id` (`report_restriction_id` ASC),
  INDEX `fk_report_schedule_id` (`report_schedule_id` ASC),
  CONSTRAINT `fk_report_schedule_has_report_restriction_report_schedule_id`
    FOREIGN KEY (`report_schedule_id`)
    REFERENCES `cenozo`.`report_schedule` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_has_report_restriction_report_restriction_id`
    FOREIGN KEY (`report_restriction_id`)
    REFERENCES `cenozo`.`report_restriction` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type_has_report_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_type_has_report_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_type_has_report_type` (
  `application_type_id` INT UNSIGNED NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_type_id`, `report_type_id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_type_has_report_type_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_type_has_report_type_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_collection` (
  `application_id` INT UNSIGNED NOT NULL,
  `collection_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_collection_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_application_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_hin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_hin` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_hin` (
  `participant_id` INT UNSIGNED NOT NULL,
  `hin_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_hin_id` (`hin_id` ASC),
  CONSTRAINT `fk_participant_last_hin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_hin_hin_id`
    FOREIGN KEY (`hin_id`)
    REFERENCES `cenozo`.`hin` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`form_association`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`form_association` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`form_association` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `form_id` INT UNSIGNED NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `record_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_form_id` (`form_id` ASC),
  INDEX `dk_record_id` (`record_id` ASC),
  UNIQUE INDEX `uq_form_id_subject_record_id` (`form_id` ASC, `subject` ASC, `record_id` ASC),
  CONSTRAINT `fk_form_association_form_id`
    FOREIGN KEY (`form_id`)
    REFERENCES `cenozo`.`form` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `mastodon` ;

-- -----------------------------------------------------
-- procedure update_consent_form_total
-- -----------------------------------------------------

USE `mastodon`;
DROP procedure IF EXISTS `mastodon`.`update_consent_form_total`;

DELIMITER $$
USE `mastodon`$$
CREATE PROCEDURE update_consent_form_total(IN proc_consent_form_id INT(10) UNSIGNED)
BEGIN

  REPLACE INTO consent_form_total
  SET consent_form_id = proc_consent_form_id,
      entry_total = (
        SELECT COUNT(*) FROM consent_form_entry
        WHERE consent_form_id = proc_consent_form_id
      ),
      submitted_total = (
        SELECT COUNT(*) FROM consent_form_entry
        WHERE consent_form_id = proc_consent_form_id
        AND submitted = true
      );

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_proxy_form_total
-- -----------------------------------------------------

USE `mastodon`;
DROP procedure IF EXISTS `mastodon`.`update_proxy_form_total`;

DELIMITER $$
USE `mastodon`$$
CREATE PROCEDURE update_proxy_form_total(IN proc_proxy_form_id INT(10) UNSIGNED)
BEGIN

  REPLACE INTO proxy_form_total
  SET proxy_form_id = proc_proxy_form_id,
      entry_total = (
        SELECT COUNT(*) FROM proxy_form_entry
        WHERE proxy_form_id = proc_proxy_form_id
      ),
      submitted_total = (
        SELECT COUNT(*) FROM proxy_form_entry
        WHERE proxy_form_id = proc_proxy_form_id
        AND submitted = true
      );

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_contact_form_total
-- -----------------------------------------------------

USE `mastodon`;
DROP procedure IF EXISTS `mastodon`.`update_contact_form_total`;

DELIMITER $$
USE `mastodon`$$
CREATE PROCEDURE update_contact_form_total(IN proc_contact_form_id INT(10) UNSIGNED)
BEGIN

  REPLACE INTO contact_form_total
  SET contact_form_id = proc_contact_form_id,
      entry_total = (
        SELECT COUNT(*) FROM contact_form_entry
        WHERE contact_form_id = proc_contact_form_id
      ),
      submitted_total = (
        SELECT COUNT(*) FROM contact_form_entry
        WHERE contact_form_id = proc_contact_form_id
        AND submitted = true
      );

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_hin_form_total
-- -----------------------------------------------------

USE `mastodon`;
DROP procedure IF EXISTS `mastodon`.`update_hin_form_total`;

DELIMITER $$
USE `mastodon`$$
CREATE PROCEDURE update_hin_form_total(IN proc_hin_form_id INT(10) UNSIGNED)
BEGIN

  REPLACE INTO hin_form_total
  SET hin_form_id = proc_hin_form_id,
      entry_total = (
        SELECT COUNT(*) FROM hin_form_entry
        WHERE hin_form_id = proc_hin_form_id
      ),
      submitted_total = (
        SELECT COUNT(*) FROM hin_form_entry
        WHERE hin_form_id = proc_hin_form_id
        AND submitted = true
      );

END$$

DELIMITER ;
USE `cenozo` ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_participant
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_participant`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_participant(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF(
           ISNULL( application_has_participant.preferred_site_id ),
           IF(
             application_has_cohort.grouping = 'jurisdiction',
             jurisdiction.site_id,
             region_site.site_id
           ),
           application_has_participant.preferred_site_id
         ) AS site_id,
         IF(
           application_has_cohort.grouping = 'jurisdiction',
           jurisdiction.site_id,
           region_site.site_id
         ) AS default_site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN jurisdiction ON address.postcode = jurisdiction.postcode
  AND jurisdiction.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS jurisdiction_site ON jurisdiction.site_id = jurisdiction_site.id
  LEFT JOIN region ON address.region_id = region.id
  LEFT JOIN region_site ON region.id = region_site.region_id
  AND region_site.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS region_site_site ON region_site.site_id = region_site_site.id
  AND participant.language_id = region_site.language_id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE participant.id = proc_participant_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND jurisdiction.site_id <=> jurisdiction_site.id
  AND region_site.site_id <=> region_site_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_primary_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_primary_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_primary_address(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_primary_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    JOIN region ON address.region_id = region.id
    -- Joining to region_site is used to exclude addresses which are not
    -- in region_site, actual linkage (and language) is irrelevant
    JOIN region_site ON region.id = region_site.region_id
    WHERE address.active = true
    AND address.international = false
    AND address.region_id IS NOT NULL
    AND address.postcode IS NOT NULL
    AND participant.id = address.participant_id
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_first_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_first_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_first_address(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_first_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND participant.id = address.participant_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_jurisdiction
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_jurisdiction`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_jurisdiction(IN proc_jurisdiction_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF( 
           ISNULL( application_has_participant.preferred_site_id ),
           jurisdiction.site_id,
           application_has_participant.preferred_site_id
         ),
         jurisdiction.site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN jurisdiction ON address.postcode = jurisdiction.postcode
  AND jurisdiction.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS jurisdiction_site ON jurisdiction.site_id = jurisdiction_site.id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE application_has_cohort.grouping = "jurisdiction"
  AND jurisdiction.id = proc_jurisdiction_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND jurisdiction.site_id <=> jurisdiction_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_region_site
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_region_site`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_region_site(IN proc_region_site_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF(
           ISNULL( application_has_participant.preferred_site_id ),
           region_site.site_id,
           application_has_participant.preferred_site_id
         ),
         region_site.site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN region ON address.region_id = region.id
  LEFT JOIN region_site ON region.id = region_site.region_id
  AND region_site.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS region_site_site ON region_site.site_id = region_site_site.id
  AND participant.language_id = region_site.language_id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE region_site.id = proc_region_site_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND region_site.site_id <=> region_site_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_first_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_alternate_first_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_alternate_first_address(IN proc_alternate_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_first_address( alternate_id, address_id )
  SELECT alternate.id, address.id
  FROM alternate
  LEFT JOIN address ON alternate.id = address.alternate_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND alternate.id = address.alternate_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.alternate_id
  )
  WHERE alternate.id = proc_alternate_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_consent
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_consent`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_consent(IN proc_participant_id INT(10) UNSIGNED, IN proc_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND consent_type.id = proc_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_written_consent
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_written_consent`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_written_consent(IN proc_participant_id INT(10) UNSIGNED, IN proc_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE consent.written = true
    AND participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND consent_type.id = proc_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_event
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_event`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_event(IN proc_participant_id INT(10) UNSIGNED, IN proc_event_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, event_type.id, event.id
  FROM participant
  CROSS JOIN event_type
  LEFT JOIN event ON participant.id = event.participant_id
  AND event_type.id = event.event_type_id
  AND event.datetime <=> (
    SELECT MAX( datetime )
    FROM event
    WHERE participant.id = event.participant_id
    AND event_type.id = event.event_type_id
    GROUP BY event.participant_id, event.event_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND event_type.id = proc_event_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_consents
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_consents`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_consents(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_written_consents
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_written_consents`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_written_consents(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE consent.written = true
    AND participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_events
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_events`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_events(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, event_type.id, event.id
  FROM participant
  CROSS JOIN event_type
  LEFT JOIN event ON participant.id = event.participant_id
  AND event_type.id = event.event_type_id
  AND event.datetime <=> (
    SELECT MAX( datetime )
    FROM event
    WHERE participant.id = event.participant_id
    AND event_type.id = event.event_type_id
    GROUP BY event.participant_id, event.event_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_hin
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_hin`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_hin(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_hin( participant_id, hin_id )
  SELECT participant.id, hin.id
  FROM participant
  LEFT JOIN hin ON participant.id = hin.participant_id
  AND hin.datetime <=> (
    SELECT MAX( datetime )
    FROM hin 
    WHERE participant.id = hin.participant_id
    GROUP BY hin.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;
USE `mastodon`;

DELIMITER $$

USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_BEFORE_INSERT` BEFORE INSERT ON `participant` FOR EACH ROW
BEGIN
  DELETE FROM unique_identifier_pool WHERE uid = new.uid;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_AFTER_INSERT` AFTER INSERT ON `participant` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.id );
  CALL update_participant_first_address( NEW.id );
  CALL update_participant_primary_address( NEW.id );
  CALL update_participant_last_consents( NEW.id );
  CALL update_participant_last_written_consents( NEW.id );
  CALL update_participant_last_events( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`consent_type_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`consent_type_AFTER_INSERT` AFTER INSERT ON `consent_type` FOR EACH ROW
BEGIN
  INSERT INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, NEW.id, NULL
  FROM participant;
  INSERT INTO participant_last_written_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, NEW.id, NULL
  FROM participant;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`consent_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`consent_AFTER_INSERT` AFTER INSERT ON `consent` FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( NEW.participant_id, NEW.consent_type_id );
  CALL update_participant_last_written_consent( NEW.participant_id, NEW.consent_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`consent_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`consent_AFTER_UPDATE` AFTER UPDATE ON `consent` FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( NEW.participant_id, NEW.consent_type_id );
  CALL update_participant_last_written_consent( NEW.participant_id, NEW.consent_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`consent_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`consent_AFTER_DELETE` AFTER DELETE ON `consent` FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( OLD.participant_id, OLD.consent_type_id );
  CALL update_participant_last_written_consent( OLD.participant_id, OLD.consent_type_id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`consent_form_AFTER_INSERT` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`consent_form_AFTER_INSERT` AFTER INSERT ON `consent_form` FOR EACH ROW
BEGIN
  CALL update_consent_form_total( NEW.id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`consent_form_entry_AFTER_INSERT` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`consent_form_entry_AFTER_INSERT` AFTER INSERT ON `consent_form_entry` FOR EACH ROW
BEGIN
  CALL update_consent_form_total( NEW.consent_form_id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`consent_form_entry_AFTER_UPDATE` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`consent_form_entry_AFTER_UPDATE` AFTER UPDATE ON `consent_form_entry` FOR EACH ROW
BEGIN
  CALL update_consent_form_total( NEW.consent_form_id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`consent_form_entry_AFTER_DELETE` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`consent_form_entry_AFTER_DELETE` AFTER DELETE ON `consent_form_entry` FOR EACH ROW
BEGIN
  CALL update_consent_form_total( OLD.consent_form_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`alternate_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`alternate_AFTER_INSERT` AFTER INSERT ON `alternate` FOR EACH ROW
BEGIN
  CALL update_alternate_first_address( NEW.id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`proxy_form_AFTER_INSERT` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`proxy_form_AFTER_INSERT` AFTER INSERT ON `proxy_form` FOR EACH ROW
BEGIN
  CALL update_proxy_form_total( NEW.id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`proxy_form_entry_AFTER_INSERT` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`proxy_form_entry_AFTER_INSERT` AFTER INSERT ON `proxy_form_entry` FOR EACH ROW
BEGIN
  CALL update_proxy_form_total( NEW.proxy_form_id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`proxy_form_entry_AFTER_UPDATE` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`proxy_form_entry_AFTER_UPDATE` AFTER UPDATE ON `proxy_form_entry` FOR EACH ROW
BEGIN
  CALL update_proxy_form_total( NEW.proxy_form_id );
END;$$


USE `mastodon`$$
DROP TRIGGER IF EXISTS `mastodon`.`proxy_form_entry_AFTER_DELETE` $$
USE `mastodon`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mastodon`.`proxy_form_entry_AFTER_DELETE` AFTER DELETE ON `proxy_form_entry` FOR EACH ROW
BEGIN
  CALL update_proxy_form_total( OLD.proxy_form_id );
END;$$


DELIMITER ;
USE `cenozo`;

DELIMITER $$

USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_type_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_type_AFTER_INSERT` AFTER INSERT ON `event_type` FOR EACH ROW
BEGIN
  INSERT INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, NEW.id, NULL
  FROM participant;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_BEFORE_INSERT` BEFORE INSERT ON `address` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_AFTER_INSERT` AFTER INSERT ON `address` FOR EACH ROW
BEGIN
  IF NEW.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( NEW.alternate_id );
  ELSE
    CALL update_participant_first_address( NEW.participant_id );
    CALL update_participant_primary_address( NEW.participant_id );
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_BEFORE_UPDATE` BEFORE UPDATE ON `address` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_AFTER_UPDATE` AFTER UPDATE ON `address` FOR EACH ROW
BEGIN
  IF NEW.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( NEW.alternate_id );
  ELSE
    CALL update_participant_first_address( NEW.participant_id );
    CALL update_participant_primary_address( NEW.participant_id );
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_AFTER_DELETE` AFTER DELETE ON `address` FOR EACH ROW
BEGIN
  IF OLD.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( OLD.alternate_id );
  ELSE
    CALL update_participant_first_address( OLD.participant_id );
    CALL update_participant_primary_address( OLD.participant_id );
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_INSERT` BEFORE INSERT ON `jurisdiction` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM jurisdiction
    JOIN application_has_site ON jurisdiction.site_id = application_has_site.site_id
    WHERE jurisdiction.postcode = NEW.postcode
    AND application_id IN (
      SELECT application_id
      FROM application_has_site
      WHERE application_has_site.site_id = NEW.site_id
    )
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.postcode,
      "' for key 'uq_site_id_postcode'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_INSERT` AFTER INSERT ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_UPDATE` BEFORE UPDATE ON `jurisdiction` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM jurisdiction
    JOIN application_has_site ON jurisdiction.site_id = application_has_site.site_id
    WHERE jurisdiction.postcode = NEW.postcode
    AND application_id IN (
      SELECT application_id
      FROM application_has_site
      WHERE application_has_site.site_id = NEW.site_id
    )
    AND jurisdiction.id != NEW.id
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.postcode,
      "' for key 'uq_site_id_postcode'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_UPDATE` AFTER UPDATE ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_DELETE` BEFORE DELETE ON `jurisdiction` FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE site_id = OLD.site_id;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_DELETE` AFTER DELETE ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( OLD.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_BEFORE_INSERT` BEFORE INSERT ON `phone` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_BEFORE_UPDATE` BEFORE UPDATE ON `phone` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`note_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`note_BEFORE_INSERT` BEFORE INSERT ON `note` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`note_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`note_BEFORE_UPDATE` BEFORE UPDATE ON `note` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_AFTER_INSERT` AFTER INSERT ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( NEW.preferred_site_id IS NOT NULL ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_AFTER_UPDATE` AFTER UPDATE ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( NOT NEW.preferred_site_id <=> OLD.preferred_site_id ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_BEFORE_DELETE` BEFORE DELETE ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( OLD.preferred_site_id ) THEN
    DELETE FROM participant_site
    WHERE participant_id = OLD.participant_id;
    CALL update_participant_site_for_participant( OLD.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_AFTER_INSERT` AFTER INSERT ON `event` FOR EACH ROW
BEGIN
  CALL update_participant_last_event( NEW.participant_id, NEW.event_type_id );

  SET @test = ( SELECT record_address FROM event_type WHERE id = NEW.event_type_id );
  IF @test THEN
    INSERT INTO event_address( event_id, international, address_id, address1, address2, city, region_id, postcode )
    SELECT NEW.id, address.id, international, address1, address2, city, region_id, postcode
    FROM participant_primary_address
    JOIN address ON participant_primary_address.address_id = address.id
    WHERE participant_primary_address.participant_id = NEW.participant_id;
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_AFTER_UPDATE` AFTER UPDATE ON `event` FOR EACH ROW
BEGIN
  CALL update_participant_last_event( NEW.participant_id, NEW.event_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_AFTER_DELETE` AFTER DELETE ON `event` FOR EACH ROW
BEGIN
  CALL update_participant_last_event( OLD.participant_id, OLD.event_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`hin_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`hin_AFTER_INSERT` AFTER INSERT ON `hin` FOR EACH ROW
BEGIN
  CALL update_participant_last_hin( NEW.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`hin_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`hin_AFTER_UPDATE` AFTER UPDATE ON `hin` FOR EACH ROW
BEGIN
  CALL update_participant_last_hin( NEW.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`hin_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`hin_AFTER_DELETE` AFTER DELETE ON `hin` FOR EACH ROW
BEGIN
  CALL update_participant_last_hin( OLD.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_BEFORE_INSERT` BEFORE INSERT ON `region_site` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM region_site
    JOIN application_has_site ON region_site.site_id = application_has_site.site_id
    WHERE region_site.region_id = NEW.region_id
    AND region_site.language_id = NEW.language_id
    AND application_id IN (
      SELECT application_id
      FROM application_has_site
      WHERE applicatioN_has_site.site_id = NEW.site_id
    )
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.region_id, "-", NEW.language_id,
      "' for key 'uq_site_id_region_id_language_id'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_AFTER_INSERT` AFTER INSERT ON `region_site` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_BEFORE_UPDATE` BEFORE UPDATE ON `region_site` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM region_site
    JOIN application_has_site ON region_site.site_id = application_has_site.site_id
    WHERE region_site.region_id = NEW.region_id
    AND region_site.language_id = NEW.language_id
    AND application_id IN (
      SELECT application_id
      FROM application_has_site
      WHERE application_has_site.site_id = NEW.site_id
    )
    AND region_site.id != NEW.id
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.region_id, "-", NEW.language_id,
      "' for key 'uq_site_id_region_id_language_id'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_AFTER_UPDATE` AFTER UPDATE ON `region_site` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_BEFORE_DELETE` BEFORE DELETE ON `region_site` FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE site_id = OLD.site_id;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_AFTER_DELETE` AFTER DELETE ON `region_site` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( OLD.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_AFTER_INSERT` AFTER INSERT ON `participant_primary_address` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_AFTER_UPDATE` AFTER UPDATE ON `participant_primary_address` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_BEFORE_DELETE` BEFORE DELETE ON `participant_primary_address` FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE participant_id = OLD.participant_id;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_AFTER_DELETE` AFTER DELETE ON `participant_primary_address` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( OLD.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`search_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`search_AFTER_INSERT` AFTER INSERT ON `search` FOR EACH ROW
BEGIN

  REPLACE INTO search_result( create_timestamp, search_id, participant_id, record_id, subject, column_name, value )

  SELECT NULL, NEW.id, participant.id, participant.id, "participant", "honorific", participant.honorific
  FROM participant 
  WHERE honorific LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "first_name", participant.first_name
  FROM participant WHERE first_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "other_name", participant.other_name
  FROM participant WHERE other_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "last_name", participant.last_name
  FROM participant WHERE last_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "date_of_birth", participant.date_of_birth
  FROM participant WHERE date_of_birth LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "email", participant.email
  FROM participant WHERE email LIKE NEW.word

  UNION SELECT NULL, NEW.id, alternate.participant_id, alternate.id, "alternate", "first_name", alternate.first_name
  FROM alternate WHERE first_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, alternate.participant_id, alternate.id, "alternate", "last_name", alternate.last_name
  FROM alternate WHERE last_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, alternate.participant_id, alternate.id, "alternate", "association", alternate.association
  FROM alternate WHERE association LIKE NEW.word

  UNION SELECT NULL, NEW.id, consent.participant_id, consent.id, "consent", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM consent WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, hin.participant_id, hin.id, "hin", "code", hin.code
  FROM hin WHERE code LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "address1",
    IF( CHAR_LENGTH( address1 ) > 255, CONCAT( SUBSTRING( address1, 1, 252 ), "..." ), address1 ) 
  FROM address WHERE address1 LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "address1",
    IF( CHAR_LENGTH( address1 ) > 255, CONCAT( SUBSTRING( address1, 1, 252 ), "..." ), address1 ) 
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE address1 LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "address2",
    IF( CHAR_LENGTH( address2 ) > 255, CONCAT( SUBSTRING( address2, 1, 252 ), "..." ), address2 ) 
  FROM address WHERE address2 LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "address2",
    IF( CHAR_LENGTH( address2 ) > 255, CONCAT( SUBSTRING( address2, 1, 252 ), "..." ), address2 ) 
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE address2 LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "city", address.city
  FROM address WHERE city LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "city", address.city
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE city LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "postcode", address.postcode
  FROM address WHERE postcode LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "postcode", address.postcode
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE postcode LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM address WHERE note LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, phone.participant_id, phone.id, "phone", "number", phone.number
  FROM phone WHERE number LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, phone.id, "phone", "number", phone.number
  FROM phone 
  JOIN alternate ON phone.alternate_id = alternate.id 
  WHERE number LIKE NEW.word

  UNION SELECT NULL, NEW.id, phone.participant_id, phone.id, "phone", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM phone WHERE note LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, phone.id, "phone", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM phone 
  JOIN alternate ON phone.alternate_id = alternate.id 
  WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, note.participant_id, note.id, "note", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM note WHERE note LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, note.id, "note", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM note 
  JOIN alternate ON note.alternate_id = alternate.id 
  WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "address1",
    IF( CHAR_LENGTH( address1 ) > 255, CONCAT( SUBSTRING( address1, 1, 252 ), "..." ), address1 ) 
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE address1 LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "address2",
    IF( CHAR_LENGTH( address2 ) > 255, CONCAT( SUBSTRING( address2, 1, 252 ), "..." ), address2 ) 
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE address2 LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "city", event_address.city
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE city LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "postcode", event_address.postcode
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE postcode LIKE NEW.word;

END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
